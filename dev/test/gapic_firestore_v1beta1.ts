// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/firestore_v1beta1_proto_api';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as firestoreModule from '../src/v1beta1';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/v1beta1.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubServerStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // write something to the stream to trigger transformStub and send the response back to the client
  setImmediate(() => {
    mockStream.write({});
  });
  setImmediate(() => {
    mockStream.end();
  });
  return sinon.stub().returns(mockStream);
}

function stubBidiStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  return sinon.stub().returns(mockStream);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.FirestoreClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = firestoreModule.FirestoreClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = firestoreModule.FirestoreClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = firestoreModule.FirestoreClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new firestoreModule.FirestoreClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new firestoreModule.FirestoreClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.firestoreStub, undefined);
      await client.initialize();
      assert(client.firestoreStub);
    });

    it('has close method for the initialized client', done => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.firestoreStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.firestoreStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getDocument', () => {
    it('invokes getDocument without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.Document()
      );
      client.innerApiCalls.getDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.getDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.Document()
      );
      client.innerApiCalls.getDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.firestore.v1beta1.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getDocument(request), expectedError);
    });
  });

  describe('updateDocument', () => {
    it('invokes updateDocument without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.Document()
      );
      client.innerApiCalls.updateDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.updateDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.Document()
      );
      client.innerApiCalls.updateDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.firestore.v1beta1.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateDocument(request), expectedError);
    });
  });

  describe('deleteDocument', () => {
    it('invokes deleteDocument without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteDocument(request), expectedError);
    });
  });

  describe('beginTransaction', () => {
    it('invokes beginTransaction without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BeginTransactionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BeginTransactionRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.BeginTransactionResponse()
      );
      client.innerApiCalls.beginTransaction = stubSimpleCall(expectedResponse);
      const [response] = await client.beginTransaction(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes beginTransaction without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BeginTransactionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BeginTransactionRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.BeginTransactionResponse()
      );
      client.innerApiCalls.beginTransaction =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.beginTransaction(
          request,
          (
            err?: Error | null,
            result?: protos.google.firestore.v1beta1.IBeginTransactionResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes beginTransaction with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BeginTransactionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BeginTransactionRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.beginTransaction = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.beginTransaction(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes beginTransaction with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BeginTransactionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BeginTransactionRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.beginTransaction(request), expectedError);
    });
  });

  describe('commit', () => {
    it('invokes commit without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.CommitRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CommitRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.CommitResponse()
      );
      client.innerApiCalls.commit = stubSimpleCall(expectedResponse);
      const [response] = await client.commit(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.commit as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.commit as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes commit without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.CommitRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CommitRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.CommitResponse()
      );
      client.innerApiCalls.commit =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.commit(
          request,
          (
            err?: Error | null,
            result?: protos.google.firestore.v1beta1.ICommitResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.commit as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.commit as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes commit with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.CommitRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CommitRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.commit = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.commit(request), expectedError);
      const actualRequest = (client.innerApiCalls.commit as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.commit as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes commit with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.CommitRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CommitRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.commit(request), expectedError);
    });
  });

  describe('rollback', () => {
    it('invokes rollback without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.RollbackRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.RollbackRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.rollback = stubSimpleCall(expectedResponse);
      const [response] = await client.rollback(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes rollback without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.RollbackRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.RollbackRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.rollback =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.rollback(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes rollback with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.RollbackRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.RollbackRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.rollback = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.rollback(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes rollback with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.RollbackRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.RollbackRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.rollback(request), expectedError);
    });
  });

  describe('batchWrite', () => {
    it('invokes batchWrite without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchWriteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BatchWriteRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchWriteResponse()
      );
      client.innerApiCalls.batchWrite = stubSimpleCall(expectedResponse);
      const [response] = await client.batchWrite(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchWrite as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchWrite as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchWrite without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchWriteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BatchWriteRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchWriteResponse()
      );
      client.innerApiCalls.batchWrite =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchWrite(
          request,
          (
            err?: Error | null,
            result?: protos.google.firestore.v1beta1.IBatchWriteResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchWrite as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchWrite as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchWrite with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchWriteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BatchWriteRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchWrite = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchWrite(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchWrite as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchWrite as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchWrite with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchWriteRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BatchWriteRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchWrite(request), expectedError);
    });
  });

  describe('createDocument', () => {
    it('invokes createDocument without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CreateDocumentRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.Document()
      );
      client.innerApiCalls.createDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.createDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CreateDocumentRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.Document()
      );
      client.innerApiCalls.createDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.firestore.v1beta1.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CreateDocumentRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.CreateDocumentRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createDocument(request), expectedError);
    });
  });

  describe('batchGetDocuments', () => {
    it('invokes batchGetDocuments without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchGetDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BatchGetDocumentsRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchGetDocumentsResponse()
      );
      client.innerApiCalls.batchGetDocuments =
        stubServerStreamingCall(expectedResponse);
      const stream = client.batchGetDocuments(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.firestore.v1beta1.BatchGetDocumentsResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchGetDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchGetDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchGetDocuments with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchGetDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BatchGetDocumentsRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedHeaderRequestParams = `database=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchGetDocuments = stubServerStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.batchGetDocuments(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.firestore.v1beta1.BatchGetDocumentsResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      const actualRequest = (
        client.innerApiCalls.batchGetDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchGetDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchGetDocuments with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.BatchGetDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.BatchGetDocumentsRequest',
        ['database']
      );
      request.database = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      const stream = client.batchGetDocuments(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.firestore.v1beta1.BatchGetDocumentsResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
    });
  });

  describe('runQuery', () => {
    it('invokes runQuery without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.RunQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.RunQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.RunQueryResponse()
      );
      client.innerApiCalls.runQuery = stubServerStreamingCall(expectedResponse);
      const stream = client.runQuery(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.RunQueryResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runQuery with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.RunQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.RunQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.runQuery = stubServerStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.runQuery(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.RunQueryResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      const actualRequest = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runQuery with closed client', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.RunQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.RunQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      const stream = client.runQuery(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.RunQueryResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
    });
  });

  describe('write', () => {
    it('invokes write without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.WriteRequest()
      );

      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.WriteResponse()
      );
      client.innerApiCalls.write = stubBidiStreamingCall(expectedResponse);
      const stream = client.write();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.WriteResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.write as SinonStub).getCall(0).calledWith(null)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });

    it('invokes write with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.WriteRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.write = stubBidiStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.write();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.WriteResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.innerApiCalls.write as SinonStub).getCall(0).calledWith(null)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });
  });

  describe('listen', () => {
    it('invokes listen without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListenRequest()
      );

      const expectedResponse = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListenResponse()
      );
      client.innerApiCalls.listen = stubBidiStreamingCall(expectedResponse);
      const stream = client.listen();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.ListenResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listen as SinonStub).getCall(0).calledWith(null)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });

    it('invokes listen with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListenRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listen = stubBidiStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listen();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.ListenResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.innerApiCalls.listen as SinonStub).getCall(0).calledWith(null)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });
  });

  describe('listDocuments', () => {
    it('invokes listDocuments without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
      ];
      client.innerApiCalls.listDocuments = stubSimpleCall(expectedResponse);
      const [response] = await client.listDocuments(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocuments without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
      ];
      client.innerApiCalls.listDocuments =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDocuments(
          request,
          (
            err?: Error | null,
            result?: protos.google.firestore.v1beta1.IDocument[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocuments with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDocuments = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDocuments(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocumentsStream without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
      ];
      client.descriptors.page.listDocuments.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDocumentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.firestore.v1beta1.Document[] = [];
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.Document) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDocuments, request)
      );
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDocumentsStream with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDocuments.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDocumentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.firestore.v1beta1.Document[] = [];
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.Document) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDocuments, request)
      );
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDocuments without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
      ];
      client.descriptors.page.listDocuments.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.firestore.v1beta1.IDocument[] = [];
      const iterable = client.listDocumentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDocuments.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDocuments.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDocuments with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const defaultValue2 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListDocumentsRequest',
        ['collectionId']
      );
      request.collectionId = defaultValue2;
      const expectedHeaderRequestParams = `parent=${defaultValue1}&collection_id=${defaultValue2}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDocuments.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDocumentsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.firestore.v1beta1.IDocument[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDocuments.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDocuments.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('partitionQuery', () => {
    it('invokes partitionQuery without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.PartitionQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.PartitionQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
      ];
      client.innerApiCalls.partitionQuery = stubSimpleCall(expectedResponse);
      const [response] = await client.partitionQuery(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.partitionQuery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.partitionQuery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes partitionQuery without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.PartitionQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.PartitionQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
      ];
      client.innerApiCalls.partitionQuery =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.partitionQuery(
          request,
          (
            err?: Error | null,
            result?: protos.google.firestore.v1beta1.ICursor[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.partitionQuery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.partitionQuery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes partitionQuery with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.PartitionQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.PartitionQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.partitionQuery = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.partitionQuery(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.partitionQuery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.partitionQuery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes partitionQueryStream without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.PartitionQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.PartitionQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
      ];
      client.descriptors.page.partitionQuery.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.partitionQueryStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.firestore.v1beta1.Cursor[] = [];
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.Cursor) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.partitionQuery.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.partitionQuery, request)
      );
      assert(
        (client.descriptors.page.partitionQuery.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes partitionQueryStream with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.PartitionQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.PartitionQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.partitionQuery.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.partitionQueryStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.firestore.v1beta1.Cursor[] = [];
        stream.on(
          'data',
          (response: protos.google.firestore.v1beta1.Cursor) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.partitionQuery.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.partitionQuery, request)
      );
      assert(
        (client.descriptors.page.partitionQuery.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with partitionQuery without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.PartitionQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.PartitionQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
        generateSampleMessage(new protos.google.firestore.v1beta1.Cursor()),
      ];
      client.descriptors.page.partitionQuery.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.firestore.v1beta1.ICursor[] = [];
      const iterable = client.partitionQueryAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.partitionQuery.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.partitionQuery.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with partitionQuery with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.PartitionQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.PartitionQueryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.partitionQuery.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.partitionQueryAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.firestore.v1beta1.ICursor[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.partitionQuery.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.partitionQuery.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCollectionIds', () => {
    it('invokes listCollectionIds without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListCollectionIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListCollectionIdsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.innerApiCalls.listCollectionIds = stubSimpleCall(expectedResponse);
      const [response] = await client.listCollectionIds(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCollectionIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCollectionIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCollectionIds without error using callback', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListCollectionIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListCollectionIdsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.innerApiCalls.listCollectionIds =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCollectionIds(
          request,
          (err?: Error | null, result?: string[] | null) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCollectionIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCollectionIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCollectionIds with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListCollectionIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListCollectionIdsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCollectionIds = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCollectionIds(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCollectionIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCollectionIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCollectionIdsStream without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListCollectionIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListCollectionIdsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.descriptors.page.listCollectionIds.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCollectionIdsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: string[] = [];
        stream.on('data', (response: string) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCollectionIds.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCollectionIds, request)
      );
      assert(
        (client.descriptors.page.listCollectionIds.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCollectionIdsStream with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListCollectionIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListCollectionIdsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCollectionIds.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCollectionIdsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: string[] = [];
        stream.on('data', (response: string) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCollectionIds.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCollectionIds, request)
      );
      assert(
        (client.descriptors.page.listCollectionIds.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCollectionIds without error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListCollectionIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListCollectionIdsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [new String(), new String(), new String()];
      client.descriptors.page.listCollectionIds.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: string[] = [];
      const iterable = client.listCollectionIdsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCollectionIds.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCollectionIds.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCollectionIds with error', async () => {
      const client = new firestoreModule.FirestoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.firestore.v1beta1.ListCollectionIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.firestore.v1beta1.ListCollectionIdsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCollectionIds.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCollectionIdsAsync(request);
      await assert.rejects(async () => {
        const responses: string[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCollectionIds.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCollectionIds.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
});
