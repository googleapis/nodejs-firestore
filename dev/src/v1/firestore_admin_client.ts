// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/firestore_admin_v1_proto_api';
import jsonProtos = require('../../protos/admin_v1.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/firestore_admin_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './firestore_admin_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The Cloud Firestore Admin API.
 *
 *  This API provides several administrative services for Cloud Firestore.
 *
 *  Project, Database, Namespace, Collection, Collection Group, and Document are
 *  used as defined in the Google Cloud Firestore API.
 *
 *  Operation: An Operation represents work being performed in the background.
 *
 *  The index service manages Cloud Firestore indexes.
 *
 *  Index creation is performed asynchronously.
 *  An Operation resource is created for each such asynchronous operation.
 *  The state of the operation (including any errors encountered)
 *  may be queried via the Operation resource.
 *
 *  The Operations collection provides a record of actions performed for the
 *  specified Project (including any Operations in progress). Operations are not
 *  created directly but through calls on other collections or resources.
 *
 *  An Operation that is done may be deleted so that it is no longer listed as
 *  part of the Operation collection. Operations are garbage collected after
 *  30 days. By default, ListOperations will only return in progress and failed
 *  operations. To list completed operation, issue a ListOperations request with
 *  the filter `done: true`.
 *
 *  Operations are created by service `FirestoreAdmin`, but are accessed via
 *  service `google.longrunning.Operations`.
 * @class
 * @memberof v1
 */
export class FirestoreAdminClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  firestoreAdminStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of FirestoreAdminClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new FirestoreAdminClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof FirestoreAdminClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      collectionGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/databases/{database}/collectionGroups/{collection}'
      ),
      databasePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/databases/{database}'
      ),
      fieldPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'
      ),
      indexPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listIndexes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'indexes'
      ),
      listFields: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'fields'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/databases/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/databases/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/databases/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/databases/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createIndexResponse = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.Index'
    ) as gax.protobuf.Type;
    const createIndexMetadata = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.IndexOperationMetadata'
    ) as gax.protobuf.Type;
    const updateFieldResponse = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.Field'
    ) as gax.protobuf.Type;
    const updateFieldMetadata = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.FieldOperationMetadata'
    ) as gax.protobuf.Type;
    const exportDocumentsResponse = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.ExportDocumentsResponse'
    ) as gax.protobuf.Type;
    const exportDocumentsMetadata = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.ExportDocumentsMetadata'
    ) as gax.protobuf.Type;
    const importDocumentsResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const importDocumentsMetadata = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.ImportDocumentsMetadata'
    ) as gax.protobuf.Type;
    const createDatabaseResponse = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.Database'
    ) as gax.protobuf.Type;
    const createDatabaseMetadata = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.CreateDatabaseMetadata'
    ) as gax.protobuf.Type;
    const updateDatabaseResponse = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.Database'
    ) as gax.protobuf.Type;
    const updateDatabaseMetadata = protoFilesRoot.lookup(
      '.google.firestore.admin.v1.UpdateDatabaseMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createIndex: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createIndexResponse.decode.bind(createIndexResponse),
        createIndexMetadata.decode.bind(createIndexMetadata)
      ),
      updateField: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateFieldResponse.decode.bind(updateFieldResponse),
        updateFieldMetadata.decode.bind(updateFieldMetadata)
      ),
      exportDocuments: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        exportDocumentsResponse.decode.bind(exportDocumentsResponse),
        exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)
      ),
      importDocuments: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importDocumentsResponse.decode.bind(importDocumentsResponse),
        importDocumentsMetadata.decode.bind(importDocumentsMetadata)
      ),
      createDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createDatabaseResponse.decode.bind(createDatabaseResponse),
        createDatabaseMetadata.decode.bind(createDatabaseMetadata)
      ),
      updateDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateDatabaseResponse.decode.bind(updateDatabaseResponse),
        updateDatabaseMetadata.decode.bind(updateDatabaseMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.firestore.admin.v1.FirestoreAdmin',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.firestoreAdminStub) {
      return this.firestoreAdminStub;
    }

    // Put together the "service stub" for
    // google.firestore.admin.v1.FirestoreAdmin.
    this.firestoreAdminStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.firestore.admin.v1.FirestoreAdmin'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.firestore.admin.v1.FirestoreAdmin,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const firestoreAdminStubMethods = [
      'createIndex',
      'listIndexes',
      'getIndex',
      'deleteIndex',
      'getField',
      'updateField',
      'listFields',
      'exportDocuments',
      'importDocuments',
      'createDatabase',
      'getDatabase',
      'listDatabases',
      'updateDatabase',
    ];
    for (const methodName of firestoreAdminStubMethods) {
      const callPromise = this.firestoreAdminStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.firestoreAdminStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'firestore.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'firestore.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/datastore',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a composite index.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.firestore.admin.v1.Index|Index}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.get_index.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_GetIndex_async
   */
  getIndex(
    request?: protos.google.firestore.admin.v1.IGetIndexRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.firestore.admin.v1.IIndex,
      protos.google.firestore.admin.v1.IGetIndexRequest | undefined,
      {} | undefined,
    ]
  >;
  getIndex(
    request: protos.google.firestore.admin.v1.IGetIndexRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.firestore.admin.v1.IIndex,
      protos.google.firestore.admin.v1.IGetIndexRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIndex(
    request: protos.google.firestore.admin.v1.IGetIndexRequest,
    callback: Callback<
      protos.google.firestore.admin.v1.IIndex,
      protos.google.firestore.admin.v1.IGetIndexRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIndex(
    request?: protos.google.firestore.admin.v1.IGetIndexRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.firestore.admin.v1.IIndex,
          protos.google.firestore.admin.v1.IGetIndexRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.firestore.admin.v1.IIndex,
      protos.google.firestore.admin.v1.IGetIndexRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.firestore.admin.v1.IIndex,
      protos.google.firestore.admin.v1.IGetIndexRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIndex(request, options, callback);
  }
  /**
   * Deletes a composite index.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.delete_index.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_DeleteIndex_async
   */
  deleteIndex(
    request?: protos.google.firestore.admin.v1.IDeleteIndexRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.firestore.admin.v1.IDeleteIndexRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteIndex(
    request: protos.google.firestore.admin.v1.IDeleteIndexRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.firestore.admin.v1.IDeleteIndexRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteIndex(
    request: protos.google.firestore.admin.v1.IDeleteIndexRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.firestore.admin.v1.IDeleteIndexRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteIndex(
    request?: protos.google.firestore.admin.v1.IDeleteIndexRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.firestore.admin.v1.IDeleteIndexRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.firestore.admin.v1.IDeleteIndexRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.firestore.admin.v1.IDeleteIndexRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteIndex(request, options, callback);
  }
  /**
   * Gets the metadata and configuration for a Field.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.firestore.admin.v1.Field|Field}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.get_field.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_GetField_async
   */
  getField(
    request?: protos.google.firestore.admin.v1.IGetFieldRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.firestore.admin.v1.IField,
      protos.google.firestore.admin.v1.IGetFieldRequest | undefined,
      {} | undefined,
    ]
  >;
  getField(
    request: protos.google.firestore.admin.v1.IGetFieldRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.firestore.admin.v1.IField,
      protos.google.firestore.admin.v1.IGetFieldRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getField(
    request: protos.google.firestore.admin.v1.IGetFieldRequest,
    callback: Callback<
      protos.google.firestore.admin.v1.IField,
      protos.google.firestore.admin.v1.IGetFieldRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getField(
    request?: protos.google.firestore.admin.v1.IGetFieldRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.firestore.admin.v1.IField,
          protos.google.firestore.admin.v1.IGetFieldRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.firestore.admin.v1.IField,
      protos.google.firestore.admin.v1.IGetFieldRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.firestore.admin.v1.IField,
      protos.google.firestore.admin.v1.IGetFieldRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getField(request, options, callback);
  }
  /**
   * Gets information about a database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the form
   *   `projects/{project_id}/databases/{database_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.firestore.admin.v1.Database|Database}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.get_database.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_GetDatabase_async
   */
  getDatabase(
    request?: protos.google.firestore.admin.v1.IGetDatabaseRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.firestore.admin.v1.IDatabase,
      protos.google.firestore.admin.v1.IGetDatabaseRequest | undefined,
      {} | undefined,
    ]
  >;
  getDatabase(
    request: protos.google.firestore.admin.v1.IGetDatabaseRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.firestore.admin.v1.IDatabase,
      protos.google.firestore.admin.v1.IGetDatabaseRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDatabase(
    request: protos.google.firestore.admin.v1.IGetDatabaseRequest,
    callback: Callback<
      protos.google.firestore.admin.v1.IDatabase,
      protos.google.firestore.admin.v1.IGetDatabaseRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDatabase(
    request?: protos.google.firestore.admin.v1.IGetDatabaseRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.firestore.admin.v1.IDatabase,
          | protos.google.firestore.admin.v1.IGetDatabaseRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.firestore.admin.v1.IDatabase,
      protos.google.firestore.admin.v1.IGetDatabaseRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.firestore.admin.v1.IDatabase,
      protos.google.firestore.admin.v1.IGetDatabaseRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDatabase(request, options, callback);
  }
  /**
   * List all the databases in the project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.firestore.admin.v1.ListDatabasesResponse|ListDatabasesResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.list_databases.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_ListDatabases_async
   */
  listDatabases(
    request?: protos.google.firestore.admin.v1.IListDatabasesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.firestore.admin.v1.IListDatabasesResponse,
      protos.google.firestore.admin.v1.IListDatabasesRequest | undefined,
      {} | undefined,
    ]
  >;
  listDatabases(
    request: protos.google.firestore.admin.v1.IListDatabasesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.firestore.admin.v1.IListDatabasesResponse,
      protos.google.firestore.admin.v1.IListDatabasesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  listDatabases(
    request: protos.google.firestore.admin.v1.IListDatabasesRequest,
    callback: Callback<
      protos.google.firestore.admin.v1.IListDatabasesResponse,
      protos.google.firestore.admin.v1.IListDatabasesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  listDatabases(
    request?: protos.google.firestore.admin.v1.IListDatabasesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.firestore.admin.v1.IListDatabasesResponse,
          | protos.google.firestore.admin.v1.IListDatabasesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.firestore.admin.v1.IListDatabasesResponse,
      protos.google.firestore.admin.v1.IListDatabasesRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.firestore.admin.v1.IListDatabasesResponse,
      protos.google.firestore.admin.v1.IListDatabasesRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDatabases(request, options, callback);
  }

  /**
   * Creates a composite index. This returns a
   * {@link protos.google.longrunning.Operation|google.longrunning.Operation} which may be
   * used to track the status of the creation. The metadata for the operation
   * will be the type
   * {@link protos.google.firestore.admin.v1.IndexOperationMetadata|IndexOperationMetadata}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   * @param {google.firestore.admin.v1.Index} request.index
   *   Required. The composite index to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.create_index.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_CreateIndex_async
   */
  createIndex(
    request?: protos.google.firestore.admin.v1.ICreateIndexRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IIndex,
        protos.google.firestore.admin.v1.IIndexOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createIndex(
    request: protos.google.firestore.admin.v1.ICreateIndexRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IIndex,
        protos.google.firestore.admin.v1.IIndexOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createIndex(
    request: protos.google.firestore.admin.v1.ICreateIndexRequest,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IIndex,
        protos.google.firestore.admin.v1.IIndexOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createIndex(
    request?: protos.google.firestore.admin.v1.ICreateIndexRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.firestore.admin.v1.IIndex,
            protos.google.firestore.admin.v1.IIndexOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IIndex,
        protos.google.firestore.admin.v1.IIndexOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IIndex,
        protos.google.firestore.admin.v1.IIndexOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createIndex(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createIndex()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.create_index.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_CreateIndex_async
   */
  async checkCreateIndexProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.firestore.admin.v1.Index,
      protos.google.firestore.admin.v1.IndexOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createIndex,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.firestore.admin.v1.Index,
      protos.google.firestore.admin.v1.IndexOperationMetadata
    >;
  }
  /**
   * Updates a field configuration. Currently, field updates apply only to
   * single field index configuration. However, calls to
   * {@link protos.google.firestore.admin.v1.FirestoreAdmin.UpdateField|FirestoreAdmin.UpdateField}
   * should provide a field mask to avoid changing any configuration that the
   * caller isn't aware of. The field mask should be specified as: `{ paths:
   * "index_config" }`.
   *
   * This call returns a
   * {@link protos.google.longrunning.Operation|google.longrunning.Operation} which may be
   * used to track the status of the field update. The metadata for the
   * operation will be the type
   * {@link protos.google.firestore.admin.v1.FieldOperationMetadata|FieldOperationMetadata}.
   *
   * To configure the default field settings for the database, use
   * the special `Field` with resource name:
   * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.firestore.admin.v1.Field} request.field
   *   Required. The field to be updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   A mask, relative to the field. If specified, only configuration specified
   *   by this field_mask will be updated in the field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.update_field.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateField_async
   */
  updateField(
    request?: protos.google.firestore.admin.v1.IUpdateFieldRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IField,
        protos.google.firestore.admin.v1.IFieldOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateField(
    request: protos.google.firestore.admin.v1.IUpdateFieldRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IField,
        protos.google.firestore.admin.v1.IFieldOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateField(
    request: protos.google.firestore.admin.v1.IUpdateFieldRequest,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IField,
        protos.google.firestore.admin.v1.IFieldOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateField(
    request?: protos.google.firestore.admin.v1.IUpdateFieldRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.firestore.admin.v1.IField,
            protos.google.firestore.admin.v1.IFieldOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IField,
        protos.google.firestore.admin.v1.IFieldOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IField,
        protos.google.firestore.admin.v1.IFieldOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'field.name': request.field!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateField(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateField()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.update_field.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateField_async
   */
  async checkUpdateFieldProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.firestore.admin.v1.Field,
      protos.google.firestore.admin.v1.FieldOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateField,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.firestore.admin.v1.Field,
      protos.google.firestore.admin.v1.FieldOperationMetadata
    >;
  }
  /**
   * Exports a copy of all or a subset of documents from Google Cloud Firestore
   * to another storage system, such as Google Cloud Storage. Recent updates to
   * documents may not be reflected in the export. The export occurs in the
   * background and its progress can be monitored and managed via the
   * Operation resource that is created. The output of an export may only be
   * used once the associated operation is done. If an export operation is
   * cancelled before completion it may leave partial data behind in Google
   * Cloud Storage.
   *
   * For more details on export behavior and output format, refer to:
   * https://cloud.google.com/firestore/docs/manage-data/export-import
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Database to export. Should be of the form:
   *   `projects/{project_id}/databases/{database_id}`.
   * @param {string[]} request.collectionIds
   *   Which collection ids to export. Unspecified means all collections.
   * @param {string} request.outputUriPrefix
   *   The output URI. Currently only supports Google Cloud Storage URIs of the
   *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name
   *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional
   *   Google Cloud Storage namespace path. When
   *   choosing a name, be sure to consider Google Cloud Storage naming
   *   guidelines: https://cloud.google.com/storage/docs/naming.
   *   If the URI is a bucket (without a namespace path), a prefix will be
   *   generated based on the start time.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.export_documents.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_ExportDocuments_async
   */
  exportDocuments(
    request?: protos.google.firestore.admin.v1.IExportDocumentsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IExportDocumentsResponse,
        protos.google.firestore.admin.v1.IExportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  exportDocuments(
    request: protos.google.firestore.admin.v1.IExportDocumentsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IExportDocumentsResponse,
        protos.google.firestore.admin.v1.IExportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  exportDocuments(
    request: protos.google.firestore.admin.v1.IExportDocumentsRequest,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IExportDocumentsResponse,
        protos.google.firestore.admin.v1.IExportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  exportDocuments(
    request?: protos.google.firestore.admin.v1.IExportDocumentsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.firestore.admin.v1.IExportDocumentsResponse,
            protos.google.firestore.admin.v1.IExportDocumentsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IExportDocumentsResponse,
        protos.google.firestore.admin.v1.IExportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IExportDocumentsResponse,
        protos.google.firestore.admin.v1.IExportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.exportDocuments(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `exportDocuments()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.export_documents.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_ExportDocuments_async
   */
  async checkExportDocumentsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.firestore.admin.v1.ExportDocumentsResponse,
      protos.google.firestore.admin.v1.ExportDocumentsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.exportDocuments,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.firestore.admin.v1.ExportDocumentsResponse,
      protos.google.firestore.admin.v1.ExportDocumentsMetadata
    >;
  }
  /**
   * Imports documents into Google Cloud Firestore. Existing documents with the
   * same name are overwritten. The import occurs in the background and its
   * progress can be monitored and managed via the Operation resource that is
   * created. If an ImportDocuments operation is cancelled, it is possible
   * that a subset of the data has already been imported to Cloud Firestore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Database to import into. Should be of the form:
   *   `projects/{project_id}/databases/{database_id}`.
   * @param {string[]} request.collectionIds
   *   Which collection ids to import. Unspecified means all collections included
   *   in the import.
   * @param {string} request.inputUriPrefix
   *   Location of the exported files.
   *   This must match the output_uri_prefix of an ExportDocumentsResponse from
   *   an export that has completed successfully.
   *   See:
   *   {@link protos.google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix|google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.import_documents.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_ImportDocuments_async
   */
  importDocuments(
    request?: protos.google.firestore.admin.v1.IImportDocumentsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.firestore.admin.v1.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  importDocuments(
    request: protos.google.firestore.admin.v1.IImportDocumentsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.firestore.admin.v1.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importDocuments(
    request: protos.google.firestore.admin.v1.IImportDocumentsRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.firestore.admin.v1.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importDocuments(
    request?: protos.google.firestore.admin.v1.IImportDocumentsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.firestore.admin.v1.IImportDocumentsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.firestore.admin.v1.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.firestore.admin.v1.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importDocuments(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `importDocuments()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.import_documents.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_ImportDocuments_async
   */
  async checkImportDocumentsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.firestore.admin.v1.ImportDocumentsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importDocuments,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.firestore.admin.v1.ImportDocumentsMetadata
    >;
  }
  /**
   * Create a database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}`
   * @param {google.firestore.admin.v1.Database} request.database
   *   Required. The Database to create.
   * @param {string} request.databaseId
   *   Required. The ID to use for the database, which will become the final
   *   component of the database's resource name.
   *
   *   The value must be set to "(default)".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.create_database.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_CreateDatabase_async
   */
  createDatabase(
    request?: protos.google.firestore.admin.v1.ICreateDatabaseRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.ICreateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createDatabase(
    request: protos.google.firestore.admin.v1.ICreateDatabaseRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.ICreateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDatabase(
    request: protos.google.firestore.admin.v1.ICreateDatabaseRequest,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.ICreateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDatabase(
    request?: protos.google.firestore.admin.v1.ICreateDatabaseRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.firestore.admin.v1.IDatabase,
            protos.google.firestore.admin.v1.ICreateDatabaseMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.ICreateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.ICreateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDatabase(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createDatabase()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.create_database.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_CreateDatabase_async
   */
  async checkCreateDatabaseProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.firestore.admin.v1.Database,
      protos.google.firestore.admin.v1.CreateDatabaseMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createDatabase,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.firestore.admin.v1.Database,
      protos.google.firestore.admin.v1.CreateDatabaseMetadata
    >;
  }
  /**
   * Updates a database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.firestore.admin.v1.Database} request.database
   *   Required. The database to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.update_database.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateDatabase_async
   */
  updateDatabase(
    request?: protos.google.firestore.admin.v1.IUpdateDatabaseRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.IUpdateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateDatabase(
    request: protos.google.firestore.admin.v1.IUpdateDatabaseRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.IUpdateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDatabase(
    request: protos.google.firestore.admin.v1.IUpdateDatabaseRequest,
    callback: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.IUpdateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDatabase(
    request?: protos.google.firestore.admin.v1.IUpdateDatabaseRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.firestore.admin.v1.IDatabase,
            protos.google.firestore.admin.v1.IUpdateDatabaseMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.IUpdateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.firestore.admin.v1.IDatabase,
        protos.google.firestore.admin.v1.IUpdateDatabaseMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'database.name': request.database!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateDatabase(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateDatabase()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.update_database.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateDatabase_async
   */
  async checkUpdateDatabaseProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.firestore.admin.v1.Database,
      protos.google.firestore.admin.v1.UpdateDatabaseMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateDatabase,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.firestore.admin.v1.Database,
      protos.google.firestore.admin.v1.UpdateDatabaseMetadata
    >;
  }
  /**
   * Lists composite indexes.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {number} request.pageSize
   *   The number of results to return.
   * @param {string} request.pageToken
   *   A page token, returned from a previous call to
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes},
   *   that may be used to get the next page of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.firestore.admin.v1.Index|Index}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listIndexesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listIndexes(
    request?: protos.google.firestore.admin.v1.IListIndexesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.firestore.admin.v1.IIndex[],
      protos.google.firestore.admin.v1.IListIndexesRequest | null,
      protos.google.firestore.admin.v1.IListIndexesResponse,
    ]
  >;
  listIndexes(
    request: protos.google.firestore.admin.v1.IListIndexesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.firestore.admin.v1.IListIndexesRequest,
      protos.google.firestore.admin.v1.IListIndexesResponse | null | undefined,
      protos.google.firestore.admin.v1.IIndex
    >
  ): void;
  listIndexes(
    request: protos.google.firestore.admin.v1.IListIndexesRequest,
    callback: PaginationCallback<
      protos.google.firestore.admin.v1.IListIndexesRequest,
      protos.google.firestore.admin.v1.IListIndexesResponse | null | undefined,
      protos.google.firestore.admin.v1.IIndex
    >
  ): void;
  listIndexes(
    request?: protos.google.firestore.admin.v1.IListIndexesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.firestore.admin.v1.IListIndexesRequest,
          | protos.google.firestore.admin.v1.IListIndexesResponse
          | null
          | undefined,
          protos.google.firestore.admin.v1.IIndex
        >,
    callback?: PaginationCallback<
      protos.google.firestore.admin.v1.IListIndexesRequest,
      protos.google.firestore.admin.v1.IListIndexesResponse | null | undefined,
      protos.google.firestore.admin.v1.IIndex
    >
  ): Promise<
    [
      protos.google.firestore.admin.v1.IIndex[],
      protos.google.firestore.admin.v1.IListIndexesRequest | null,
      protos.google.firestore.admin.v1.IListIndexesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listIndexes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {number} request.pageSize
   *   The number of results to return.
   * @param {string} request.pageToken
   *   A page token, returned from a previous call to
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes},
   *   that may be used to get the next page of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.firestore.admin.v1.Index|Index} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listIndexesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listIndexesStream(
    request?: protos.google.firestore.admin.v1.IListIndexesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listIndexes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listIndexes.createStream(
      this.innerApiCalls.listIndexes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listIndexes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {number} request.pageSize
   *   The number of results to return.
   * @param {string} request.pageToken
   *   A page token, returned from a previous call to
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes},
   *   that may be used to get the next page of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.firestore.admin.v1.Index|Index}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.list_indexes.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_ListIndexes_async
   */
  listIndexesAsync(
    request?: protos.google.firestore.admin.v1.IListIndexesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.firestore.admin.v1.IIndex> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listIndexes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listIndexes.asyncIterate(
      this.innerApiCalls['listIndexes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.firestore.admin.v1.IIndex>;
  }
  /**
   * Lists the field configuration and metadata for this database.
   *
   * Currently,
   * {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}
   * only supports listing fields that have been explicitly overridden. To issue
   * this query, call
   * {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}
   * with the filter set to `indexConfig.usesAncestorConfig:false` .
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   * @param {string} request.filter
   *   The filter to apply to list results. Currently,
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}
   *   only supports listing fields that have been explicitly overridden. To issue
   *   this query, call
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}
   *   with a filter that includes `indexConfig.usesAncestorConfig:false` .
   * @param {number} request.pageSize
   *   The number of results to return.
   * @param {string} request.pageToken
   *   A page token, returned from a previous call to
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields},
   *   that may be used to get the next page of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.firestore.admin.v1.Field|Field}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listFieldsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listFields(
    request?: protos.google.firestore.admin.v1.IListFieldsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.firestore.admin.v1.IField[],
      protos.google.firestore.admin.v1.IListFieldsRequest | null,
      protos.google.firestore.admin.v1.IListFieldsResponse,
    ]
  >;
  listFields(
    request: protos.google.firestore.admin.v1.IListFieldsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.firestore.admin.v1.IListFieldsRequest,
      protos.google.firestore.admin.v1.IListFieldsResponse | null | undefined,
      protos.google.firestore.admin.v1.IField
    >
  ): void;
  listFields(
    request: protos.google.firestore.admin.v1.IListFieldsRequest,
    callback: PaginationCallback<
      protos.google.firestore.admin.v1.IListFieldsRequest,
      protos.google.firestore.admin.v1.IListFieldsResponse | null | undefined,
      protos.google.firestore.admin.v1.IField
    >
  ): void;
  listFields(
    request?: protos.google.firestore.admin.v1.IListFieldsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.firestore.admin.v1.IListFieldsRequest,
          | protos.google.firestore.admin.v1.IListFieldsResponse
          | null
          | undefined,
          protos.google.firestore.admin.v1.IField
        >,
    callback?: PaginationCallback<
      protos.google.firestore.admin.v1.IListFieldsRequest,
      protos.google.firestore.admin.v1.IListFieldsResponse | null | undefined,
      protos.google.firestore.admin.v1.IField
    >
  ): Promise<
    [
      protos.google.firestore.admin.v1.IField[],
      protos.google.firestore.admin.v1.IListFieldsRequest | null,
      protos.google.firestore.admin.v1.IListFieldsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listFields(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   * @param {string} request.filter
   *   The filter to apply to list results. Currently,
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}
   *   only supports listing fields that have been explicitly overridden. To issue
   *   this query, call
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}
   *   with a filter that includes `indexConfig.usesAncestorConfig:false` .
   * @param {number} request.pageSize
   *   The number of results to return.
   * @param {string} request.pageToken
   *   A page token, returned from a previous call to
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields},
   *   that may be used to get the next page of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.firestore.admin.v1.Field|Field} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listFieldsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listFieldsStream(
    request?: protos.google.firestore.admin.v1.IListFieldsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listFields'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFields.createStream(
      this.innerApiCalls.listFields as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listFields`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. A parent name of the form
   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   * @param {string} request.filter
   *   The filter to apply to list results. Currently,
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}
   *   only supports listing fields that have been explicitly overridden. To issue
   *   this query, call
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}
   *   with a filter that includes `indexConfig.usesAncestorConfig:false` .
   * @param {number} request.pageSize
   *   The number of results to return.
   * @param {string} request.pageToken
   *   A page token, returned from a previous call to
   *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields},
   *   that may be used to get the next page of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.firestore.admin.v1.Field|Field}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/firestore_admin.list_fields.js</caption>
   * region_tag:firestore_v1_generated_FirestoreAdmin_ListFields_async
   */
  listFieldsAsync(
    request?: protos.google.firestore.admin.v1.IListFieldsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.firestore.admin.v1.IField> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listFields'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFields.asyncIterate(
      this.innerApiCalls['listFields'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.firestore.admin.v1.IField>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified collectionGroup resource name string.
   *
   * @param {string} project
   * @param {string} database
   * @param {string} collection
   * @returns {string} Resource name string.
   */
  collectionGroupPath(project: string, database: string, collection: string) {
    return this.pathTemplates.collectionGroupPathTemplate.render({
      project: project,
      database: database,
      collection: collection,
    });
  }

  /**
   * Parse the project from CollectionGroup resource.
   *
   * @param {string} collectionGroupName
   *   A fully-qualified path representing CollectionGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCollectionGroupName(collectionGroupName: string) {
    return this.pathTemplates.collectionGroupPathTemplate.match(
      collectionGroupName
    ).project;
  }

  /**
   * Parse the database from CollectionGroup resource.
   *
   * @param {string} collectionGroupName
   *   A fully-qualified path representing CollectionGroup resource.
   * @returns {string} A string representing the database.
   */
  matchDatabaseFromCollectionGroupName(collectionGroupName: string) {
    return this.pathTemplates.collectionGroupPathTemplate.match(
      collectionGroupName
    ).database;
  }

  /**
   * Parse the collection from CollectionGroup resource.
   *
   * @param {string} collectionGroupName
   *   A fully-qualified path representing CollectionGroup resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromCollectionGroupName(collectionGroupName: string) {
    return this.pathTemplates.collectionGroupPathTemplate.match(
      collectionGroupName
    ).collection;
  }

  /**
   * Return a fully-qualified database resource name string.
   *
   * @param {string} project
   * @param {string} database
   * @returns {string} Resource name string.
   */
  databasePath(project: string, database: string) {
    return this.pathTemplates.databasePathTemplate.render({
      project: project,
      database: database,
    });
  }

  /**
   * Parse the project from Database resource.
   *
   * @param {string} databaseName
   *   A fully-qualified path representing Database resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatabaseName(databaseName: string) {
    return this.pathTemplates.databasePathTemplate.match(databaseName).project;
  }

  /**
   * Parse the database from Database resource.
   *
   * @param {string} databaseName
   *   A fully-qualified path representing Database resource.
   * @returns {string} A string representing the database.
   */
  matchDatabaseFromDatabaseName(databaseName: string) {
    return this.pathTemplates.databasePathTemplate.match(databaseName).database;
  }

  /**
   * Return a fully-qualified field resource name string.
   *
   * @param {string} project
   * @param {string} database
   * @param {string} collection
   * @param {string} field
   * @returns {string} Resource name string.
   */
  fieldPath(
    project: string,
    database: string,
    collection: string,
    field: string
  ) {
    return this.pathTemplates.fieldPathTemplate.render({
      project: project,
      database: database,
      collection: collection,
      field: field,
    });
  }

  /**
   * Parse the project from Field resource.
   *
   * @param {string} fieldName
   *   A fully-qualified path representing Field resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFieldName(fieldName: string) {
    return this.pathTemplates.fieldPathTemplate.match(fieldName).project;
  }

  /**
   * Parse the database from Field resource.
   *
   * @param {string} fieldName
   *   A fully-qualified path representing Field resource.
   * @returns {string} A string representing the database.
   */
  matchDatabaseFromFieldName(fieldName: string) {
    return this.pathTemplates.fieldPathTemplate.match(fieldName).database;
  }

  /**
   * Parse the collection from Field resource.
   *
   * @param {string} fieldName
   *   A fully-qualified path representing Field resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromFieldName(fieldName: string) {
    return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;
  }

  /**
   * Parse the field from Field resource.
   *
   * @param {string} fieldName
   *   A fully-qualified path representing Field resource.
   * @returns {string} A string representing the field.
   */
  matchFieldFromFieldName(fieldName: string) {
    return this.pathTemplates.fieldPathTemplate.match(fieldName).field;
  }

  /**
   * Return a fully-qualified index resource name string.
   *
   * @param {string} project
   * @param {string} database
   * @param {string} collection
   * @param {string} index
   * @returns {string} Resource name string.
   */
  indexPath(
    project: string,
    database: string,
    collection: string,
    index: string
  ) {
    return this.pathTemplates.indexPathTemplate.render({
      project: project,
      database: database,
      collection: collection,
      index: index,
    });
  }

  /**
   * Parse the project from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).project;
  }

  /**
   * Parse the database from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the database.
   */
  matchDatabaseFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).database;
  }

  /**
   * Parse the collection from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).collection;
  }

  /**
   * Parse the index from Index resource.
   *
   * @param {string} indexName
   *   A fully-qualified path representing Index resource.
   * @returns {string} A string representing the index.
   */
  matchIndexFromIndexName(indexName: string) {
    return this.pathTemplates.indexPathTemplate.match(indexName).index;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.firestoreAdminStub && !this._terminated) {
      return this.firestoreAdminStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
